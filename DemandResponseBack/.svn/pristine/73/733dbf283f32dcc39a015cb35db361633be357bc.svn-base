package com.xqxy.aop;

import cn.hutool.core.util.ObjectUtil;
import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.core.toolkit.IdWorker;
import com.xqxy.core.annotion.BusinessLog;
import com.xqxy.core.enums.LogAnnotionOpTypeEnum;
import com.xqxy.core.pojo.login.CurrenUserInfo;
import com.xqxy.core.util.SecurityUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.*;

import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

//@Component
//@Aspect
public class OperationLogAspect {

    private static final Log mylog = LogFactory.getLog(OperationLogAspect.class);


//    @Value("xqxy")
//    private String userName;
//    @Value("jdbc:mysql://192.168.1.160:3306/xqxy?autoReconnect=true&useUnicode=true&allowMultiQueries=true&characterEncoding=utf8&zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false&serverTimezone=CTT")
//    private String dataurl;
//    @Value("XQXY_qwe123")
//    private String datapassword;
//    @Value("com.mysql.cj.jdbc.Driver")
//    private String driver;


    @Value("${spring.datasource.mysql.username}")
    private String userName;
    @Value("${spring.datasource.mysql.jdbc-url}")
    private String dataurl;
    @Value("${spring.datasource.mysql.password}")
    private String datapassword;
    @Value("${spring.datasource.mysql.driver-class-name}")
    private String driver;


    private Connection getConnection() {
        Connection connection = null;
        try {
            Class.forName(driver);
            connection = DriverManager.getConnection(dataurl, userName, datapassword);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return connection;
    }


    private void insertLogToDatabase(Map map) {
        Connection connection = getConnection();
        PreparedStatement preparedStatement = null;
        long idWork = IdWorker.getId();
        String sql = "insert into dr_sys_op_log(id,ip,url,class_name,method_name,param,op_time,account) VALUES(?,?,?,?,?,?,?,?) ";
        try {
            preparedStatement = connection.prepareStatement(sql);
            LocalDateTime localDateTime = LocalDateTime.now();
            String dateTime = localDateTime.format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"));

            Timestamp now = new Timestamp(new java.util.Date().getTime());


            preparedStatement.setLong(1, idWork);
            preparedStatement.setString(2, map.get("ip").toString());
            preparedStatement.setString(3, map.get("url").toString());
            preparedStatement.setString(4, map.get("className").toString());
            preparedStatement.setString(5, map.get("methodName").toString());
            preparedStatement.setString(6, map.get("args").toString());
            preparedStatement.setTimestamp(7, now);
            if (map.get("account") != null) {
                preparedStatement.setString(8, map.get("account").toString());
            } else {
                preparedStatement.setNull(8, Types.VARCHAR);
            }
            preparedStatement.executeUpdate();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (preparedStatement != null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }

            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    @Pointcut("@annotation(com.xqxy.core.annotion.BusinessLog)")
    public void logRecord() {
    }


    @After("logRecord()")
    public Map methedLogAfter(JoinPoint joinPoint) {
        String id = null;
        Map map = new HashMap();
        Signature signature = joinPoint.getSignature();
        String methodName = signature.getName();
        RequestMapping annotation = joinPoint.getTarget().getClass().getAnnotation(RequestMapping.class);
        String[] value = annotation.value();
        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
        Method method = methodSignature.getMethod();
        RequestMapping annotation2 = method.getAnnotation(RequestMapping.class);


        String[] value2 = null;
        if (annotation2 == null) {
            PostMapping annotation3 = method.getAnnotation(PostMapping.class);
            if(annotation3==null){
                GetMapping annotation4 = method.getAnnotation(GetMapping.class);
                value2 = annotation4.value();
            }else {
                value2 = annotation3.value();
            }
        } else {
            value2 = annotation2.value();
        }
        String url = value[0] + value2[0];
        String className = joinPoint.getTarget().getClass().getName();
        Object[] args = joinPoint.getArgs();
        String jsonArgs = JSON.toJSONString(args);
        CurrenUserInfo currenUserInfo = SecurityUtils.getCurrentUserInfoUTF8();
        if (ObjectUtil.isNotEmpty(currenUserInfo)) {
            id = currenUserInfo.getId();
        }
        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = requestAttributes.getRequest();
        String remoteHost = request.getRemoteHost();

        String hostAddress="";
        try {
             hostAddress = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        map.put("methodName", methodName);
        map.put("url", url);
        map.put("args", jsonArgs);
        map.put("account", id);
        map.put("className", className);
        map.put("ip", hostAddress);
        this.insertLogToDatabase(map);
        return map;
    }


}
