package com.xqxy.dr.modular.event.controller;


import cn.afterturn.easypoi.entity.vo.NormalExcelConstants;
import cn.afterturn.easypoi.excel.entity.ExportParams;
import cn.afterturn.easypoi.excel.entity.enmus.ExcelType;
import cn.afterturn.easypoi.view.PoiBaseView;
import com.alibaba.excel.EasyExcel;
import com.alibaba.excel.ExcelWriter;
import com.alibaba.excel.write.metadata.WriteSheet;
import com.alibaba.excel.write.metadata.fill.FillConfig;
import com.alibaba.excel.write.metadata.fill.FillWrapper;
import com.alibaba.fastjson.JSONObject;
import com.xqxy.core.pojo.response.ResponseData;
import com.xqxy.core.util.JSONRespUtil;
import com.xqxy.dr.modular.event.entity.ConsExecuteStatistic;
import com.xqxy.dr.modular.event.entity.PlanCons;
import com.xqxy.dr.modular.event.entity.PlanCust;
import com.xqxy.dr.modular.event.param.*;
import com.xqxy.dr.modular.event.result.ConsMonitorCurve;
import com.xqxy.dr.modular.event.result.EventUserConsLineResult;
import com.xqxy.dr.modular.event.result.EventUserCustLineResult;
import com.xqxy.dr.modular.event.service.PlanConsService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ExecutionException;

/**
 * <p>
 * 方案参与用户 前端控制器
 * </p>
 *
 * @author PengChuqing
 * @since 2021-10-09
 */
@Api(tags = "方案参与用户API接口")
@RestController
@RequestMapping("/event/plan-cons")
public class PlanConsController {

    @Resource
    private PlanConsService planConsService;

    /**
     * @description: 方案编制用户分页查询(未剔除)
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "方案编制用户分页查询(未剔除)", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "方案编制用户分页查询(未剔除)", notes = "方案编制用户分页查询(未剔除)", produces = "application/json")
    @PostMapping("/pageNotDeleted")
    public ResponseData page(@RequestBody PlanConsParam planConsParam) {
        return ResponseData.success(planConsService.pageNotDeleted(planConsParam));
    }

    /**
     * @description: 方案编制用集成商页查询(未剔除)
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "方案编制用集成商页查询(未剔除)", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "方案编制用集成商页查询(未剔除)", notes = "方案编制用集成商页查询(未剔除)", produces = "application/json")
    @PostMapping("/pageCustNotDeleted")
    public ResponseData pageCust(@RequestBody PlanCustParam planCustParam) {
        return ResponseData.success(planConsService.pageCustNotDeleted(planCustParam));
    }

    /**
     * @description: 执行方案集成商分页查询
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行方案集成商分页查询", notes = "执行方案集成商分页查询", produces = "application/json")
    @PostMapping("/getCustExecuteList")
    public ResponseData getCustExecuteList(@RequestBody DeleteCustParam deleteRuleParam) {
        return ResponseData.success(planConsService.getCustExecuteList(deleteRuleParam));
    }

    /**
     * @description: 执行方案用户分页查询
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行方案用户分页查询", notes = "执行方案用户分页查询", produces = "application/json")
    @PostMapping("/getConsExecuteList")
    public ResponseData getConsExecuteList(@RequestBody DeleteConsParam deleteRuleParam) {
        return ResponseData.success(planConsService.getConsExecuteList(deleteRuleParam));
    }

    /**
     * @description: 执行方案用户导出
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行方案用户导出", notes = "执行方案用户导出", produces = "application/json")
    @PostMapping("/exportConsExecuteList")
    public void exportConsExecuteList(@RequestBody DeleteConsParam deleteRuleParam,HttpServletResponse response, HttpServletRequest request) throws ExecutionException, InterruptedException {
        List<PlanCons> list = planConsService.exportConsExecuteList(deleteRuleParam);
        try {
            //读取模板输入流
            InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream("static/cons_execute.xlsx");

            if(resourceAsStream == null){
                System.out.println("未读取到 模板");
            }

            //设置文件名称
            String fileName = URLEncoder.encode("Cons" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()), "UTF-8");
            //设置文件类型
            response.setContentType("application/vnd.ms-excel");
            //设置编码格式
            response.setCharacterEncoding("utf-8");
            // https://www.jb51.net/article/30565.htm Content-Disposition 使用说明
            response.setHeader("Content-disposition", "attachment;filename=" + fileName + ".xlsx");
            //创建excel
            ExcelWriter excelWriter = EasyExcel.write(response.getOutputStream()).withTemplate(resourceAsStream).build();
            //创建sheet
            WriteSheet writeSheet = EasyExcel.writerSheet().build();
            FillConfig fillConfig = FillConfig.builder().forceNewRow(Boolean.TRUE).build();

            // 如果有多个list 模板上必须有{前缀.} 这里的前缀就是 a，然后多个list必须用 FillWrapper包裹
            excelWriter.fill(new FillWrapper("a", list), fillConfig, writeSheet);
//
            Map map = new HashMap<>();
            map.put("total","");
            excelWriter.fill(map, writeSheet);

            // 别忘记关闭流
            excelWriter.finish();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @description: 执行方案用户导出
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行方案负荷聚合商导出", notes = "执行方案负荷聚合商导出", produces = "application/json")
    @PostMapping("/exportCustExecuteList")
    public void exportCustExecuteList(@RequestBody DeleteCustParam deleteRuleParam,HttpServletResponse response, HttpServletRequest request) {
        List<PlanCust> list = planConsService.exportCustExecuteList(deleteRuleParam);
        if(null==list) {
            list = new ArrayList<>();
        }
        try {
            //读取模板输入流
            InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream("static/cust_execute.xlsx");

            if(resourceAsStream == null){
                System.out.println("未读取到 模板");
            }

            //设置文件名称
            String fileName = URLEncoder.encode("Cust" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()), "UTF-8");
            //设置文件类型
            response.setContentType("application/vnd.ms-excel");
            //设置编码格式
            response.setCharacterEncoding("utf-8");
            // https://www.jb51.net/article/30565.htm Content-Disposition 使用说明
            response.setHeader("Content-disposition", "attachment;filename=" + fileName + ".xlsx");
            //创建excel
            ExcelWriter excelWriter = EasyExcel.write(response.getOutputStream()).withTemplate(resourceAsStream).build();
            //创建sheet
            WriteSheet writeSheet = EasyExcel.writerSheet().build();
            FillConfig fillConfig = FillConfig.builder().forceNewRow(Boolean.TRUE).build();

            // 如果有多个list 模板上必须有{前缀.} 这里的前缀就是 a，然后多个list必须用 FillWrapper包裹
            excelWriter.fill(new FillWrapper("a", list), fillConfig, writeSheet);
//
            Map map = new HashMap<>();
            map.put("total","");
            excelWriter.fill(map, writeSheet);

            // 别忘记关闭流
            excelWriter.finish();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }



    /**
     * @description: 执行方案统计查询
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行方案统计查询", notes = "执行方案统计查询", produces = "application/json")
    @PostMapping("/getExecuteStatisticCity")
    public ResponseData getExecuteStatisticCity(@RequestBody PlanParam planParam) {
        return ResponseData.success(planConsService.getExecuteStatisticCitys(planParam));
    }

    /**
     * @description: 执行方案统计查询
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行方案统计查询", notes = "执行方案统计查询", produces = "application/json")
    @PostMapping("/exportExecuteStatisticCity")
    public void getExecuteStatisticCity(@RequestBody PlanParam planParam, HttpServletRequest request, HttpServletResponse response) {
        List<ConsExecuteStatistic> executeStatisticCitys = planConsService.getExecuteStatisticCitys(planParam);
        HashMap<String, Object> map = new HashMap<>();
        map.put(NormalExcelConstants.FILE_NAME, "地市执行方案统计");
//        map.put(NormalExcelConstants.MAP_LIST, sheetList);
        map.put(NormalExcelConstants.CLASS, ConsExecuteStatistic.class);
        map.put(NormalExcelConstants.PARAMS, new ExportParams("地市执行方案统计", "地市执行方案统计", ExcelType.XSSF));
        map.put(NormalExcelConstants.DATA_LIST, executeStatisticCitys);
        PoiBaseView.render(map, request, response, NormalExcelConstants.EASYPOI_EXCEL_VIEW);
    }

    /**
     * @description: 执行方案统计查询
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行方案统计查询", notes = "执行方案统计查询", produces = "application/json")
    @PostMapping("/getExecuteStatistic")
    public ResponseData getExecuteStatistic(@RequestBody PlanParam planParam) {
        return ResponseData.success(planConsService.getExecuteStatistic(planParam));
    }

    /**
     * @description: 人工执行用户(执行方案)
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "人工执行用户", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "人工执行用户", notes = "人工执行用户", produces = "application/json")
    @PostMapping("/deleteExecuteCons")
    public ResponseData deleteExecuteCons(@RequestBody PlanParam planParam) {
        planConsService.deleteExecuteCons(planParam);
        return ResponseData.success();
    }

    /**
     * @description: 人工执行客户(执行方案)
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "人工执行客户", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "人工执行客户", notes = "人工执行客户", produces = "application/json")
    @PostMapping("/deleteExecuteCust")
    public ResponseData deleteExecuteCust(@RequestBody PlanParam planParam) {
        planConsService.deleteExecuteCust(planParam);
        return ResponseData.success();
    }

    /**
     * @description: 取消执行用户(执行方案)
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "取消执行用户", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "取消执行用户", notes = "取消执行用户", produces = "application/json")
    @PostMapping("/cancelDeleteExecuteCons")
    public ResponseData cancelDeleteExecuteCons(@RequestBody PlanParam planParam) {
        planConsService.cancelDeleteExecuteCons(planParam);
        return ResponseData.success();
    }

    /**
     * @description: 取消执行客户(执行方案)
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "取消执行客户", opType = LogAnnotionO人工执行客户pTypeEnum.QUERY)
    @ApiOperation(value = "取消执行客户", notes = "取消执行客户", produces = "application/json")
    @PostMapping("/cancelDeleteExecuteCust")
    public ResponseData cancelDeleteExecuteCust(@RequestBody PlanParam planParam) {
        planConsService.cancelDeleteExecuteCust(planParam);
        return ResponseData.success();
    }

    /**
     * @description: 获取用户短信列表
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "获取用户短信列表", notes = "获取用户短信列表", produces = "application/json")
    @PostMapping("/getConsMessageList")
    public ResponseData getConsMessageList(@RequestBody ConsMessageParam planParam) {
        return ResponseData.success(planConsService.getConsMessageList(planParam));
    }

    /**
     * @description: 获取集成商短信列表
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/18 16:01
     */
//    @BusinessLog(title = "执行方案用户分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "获取集成商短信列表", notes = "获取集成商短信列表", produces = "application/json")
    @PostMapping("/getCustMessageList")
    public ResponseData getCustMessageList(@RequestBody CustMessageParam planParam) {
        return ResponseData.success(planConsService.getCustMessageList(planParam));
    }


    /**
     * @description: 执行监测-用户监测-分页
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/27 9:46
     */
    // @BusinessLog(title = "执行监测-用户监测-分页", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行监测-用户监测-分页", notes = "执行监测-用户监测-分页", produces = "application/json")
    @PostMapping("/pageConsMonitor")
    public ResponseData pageConsMonitor(@RequestBody PlanConsParam planConsParam) {
        return ResponseData.success(planConsService.pageConsMonitor(planConsParam));
    }

    /**
     * @description: 执行监测-用户监测-曲线信息
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/27 14:19
     */
    //  @BusinessLog(title = "执行监测-用户监测-曲线信息", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "执行监测-用户监测-曲线信息", notes = "执行监测-用户监测-曲线信息", produces = "application/json")
    @PostMapping("/curveOfBaseAndTarget")
    public ResponseData curveOfBaseAndTarget(@RequestBody PlanConsParam planConsParam) {
        ConsMonitorCurve consMonitorCurve = planConsService.curveOfBaseAndTarget(planConsParam);
        return ResponseData.success(consMonitorCurve);
    }

    /**
     * @description: 电力用户-执行监测-用户监测-分页
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/27 9:46
     */
    // @BusinessLog(title = "执行监测-用户监测-分页", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "电力用户-执行监测-用户监测-分页", notes = "电力用户-执行监测-用户监测-分页", produces = "application/json")
    @PostMapping("/pageUserConsMonitor")
    public ResponseData pageUserConsMonitor(@RequestBody EventUserConsPlanListParam eventUserConsPlanListParam) {
        return ResponseData.success(planConsService.pageUserConsMonitor(eventUserConsPlanListParam));
    }

    /**
     * @description: 电力用户-执行监测-用户执行曲线
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/27 9:46
     */
    // @BusinessLog(title = "执行监测-用户监测-分页", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "电力用户-执行监测-用户执行曲线", notes = "电力用户-执行监测-用户执行曲线", produces = "application/json")
    @PostMapping("/getUserConsLine")
    public ResponseData<EventUserConsLineResult> getUserConsLine(@RequestBody EventUserConsLineParam eventUserConsLineParam) {
        return ResponseData.success(planConsService.getUserConsLine(eventUserConsLineParam));
    }

    /**
     * @description: 电力用户-执行监测-用户执行曲线2
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/27 9:46
     */
    // @BusinessLog(title = "执行监测-用户监测-分页", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "电力用户-执行监测-用户执行曲线", notes = "电力用户-执行监测-用户执行曲线", produces = "application/json")
    @PostMapping("/getUserConsLine2")
    public ResponseData getUserConsLine2(@RequestBody EventUserConsLineParam eventUserConsLineParam) {
        EventUserConsLineResult userConsLine = planConsService.getUserConsLine(eventUserConsLineParam);
        JSONObject jsonObject = JSONObject.parseObject(JSONObject.toJSONString(userConsLine));
        return ResponseData.success(JSONRespUtil.removeP(jsonObject, 2));
    }


    /**
     * @description: 负荷聚合商-执行监测-聚合商执行曲线
     * @param:
     * @return:
     * @author: PengChuqing
     * @date: 2021/10/27 9:46
     */
    // @BusinessLog(title = "执行监测-用户监测-分页", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "电力用户-执行监测-用户执行曲线", notes = "电力用户-执行监测-用户执行曲线", produces = "application/json")
    @PostMapping("/getUserCustLine")
    public ResponseData<EventUserCustLineResult> getUserCustLine(@RequestBody EventUserCustLineParam eventUserConsLineParam) {
        return ResponseData.success(planConsService.getUserCustLine(eventUserConsLineParam));
    }

}

