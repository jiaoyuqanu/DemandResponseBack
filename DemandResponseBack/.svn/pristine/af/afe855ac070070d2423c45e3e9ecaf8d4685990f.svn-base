package com.xqxy.dr.modular.subsidy.service.impl;

import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.util.NumberUtil;
import cn.hutool.core.util.ObjectUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.xqxy.core.annotion.NeedSetValueField;
import com.xqxy.core.client.SystemClient;
import com.xqxy.core.enums.ApprovalCodeEnum;
import com.xqxy.core.enums.BusTypeEnum;
import com.xqxy.core.enums.CurrenUserInfoExceptionEnum;
import com.xqxy.core.enums.YesOrNotEnum;
import com.xqxy.core.exception.ServiceException;
import com.xqxy.core.pojo.login.CurrenUserInfo;
import com.xqxy.core.pojo.response.ResponseData;
import com.xqxy.core.util.SecurityUtils;
import com.xqxy.dr.modular.baseline.util.CurveUtil;
import com.xqxy.dr.modular.bidding.enums.BiddingCheckStatusEnums;
import com.xqxy.dr.modular.evaluation.entity.ConsEvaluation;
import com.xqxy.dr.modular.evaluation.entity.ConsEvaluationAppeal;
import com.xqxy.dr.modular.evaluation.mapper.ConsEvaluationMapper;
import com.xqxy.dr.modular.evaluation.service.ConsEvaluationAppealService;
import com.xqxy.dr.modular.evaluation.service.ConsEvaluationService;
import com.xqxy.dr.modular.event.entity.ConsInvitation;
import com.xqxy.dr.modular.event.entity.Event;
import com.xqxy.dr.modular.event.service.ConsInvitationService;
import com.xqxy.dr.modular.event.service.EventService;
import com.xqxy.dr.modular.project.enums.ExamineExceptionEnum;
import com.xqxy.dr.modular.project.enums.ProjectCheckStatusEnums;
import com.xqxy.dr.modular.project.params.ExamineParam;
import com.xqxy.dr.modular.strategy.Utils.StrategyUtils;
import com.xqxy.dr.modular.subsidy.entity.ConsSubsidy;
import com.xqxy.dr.modular.subsidy.entity.CustSubsidy;
import com.xqxy.dr.modular.subsidy.entity.SubsidyAppeal;
import com.xqxy.dr.modular.subsidy.enums.SubsidyExceptionEnum;
import com.xqxy.dr.modular.subsidy.mapper.SubsidyAppealMapper;
import com.xqxy.dr.modular.subsidy.param.*;
import com.xqxy.dr.modular.subsidy.service.ConsSubsidyService;
import com.xqxy.dr.modular.subsidy.service.CustSubsidyService;
import com.xqxy.dr.modular.subsidy.service.SubsidyAppealService;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.xqxy.sys.modular.cust.entity.Cust;
import com.xqxy.sys.modular.cust.param.BusConfigParam;
import com.xqxy.sys.modular.cust.result.Result;
import com.xqxy.sys.modular.cust.service.CustService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * <p>
 * 补贴申诉 服务实现类
 * </p>
 *
 * @author Shen
 * @since 2021-10-25
 */
@Service
public class SubsidyAppealServiceImpl extends ServiceImpl<SubsidyAppealMapper, SubsidyAppeal> implements SubsidyAppealService {

    @Resource
    SystemClient systemClient;

    @Resource
    ConsSubsidyService consSubsidyService;

    @Resource
    CustSubsidyService custSubsidyService;

    @Autowired
    private CustService custService;

    @Autowired
    private ConsEvaluationService consEvaluationService;

    @Autowired
    private ConsInvitationService consInvitationService;

    @Autowired
    private EventService eventService;

    @Resource
    ConsEvaluationMapper consEvaluationMapper;

    @Resource
    ConsEvaluationAppealService consEvaluationAppealService;

    @Override
    public void update(SubsidyAppealParam subsidyAppealParam) {
        SubsidyAppeal subsidyAppeal = new SubsidyAppeal();
        BeanUtils.copyProperties(subsidyAppealParam,subsidyAppeal);
        this.updateById(subsidyAppeal);
    }


    @Override
    @NeedSetValueField
    public SubsidyAppeal detail(Long busId) {
       /* LambdaQueryWrapper<SubsidyAppeal> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.eq(SubsidyAppeal::getId,busId);
        List<SubsidyAppeal> list = this.list(queryWrapper);
        if (list.size() > 0) {
            return list.get(0);
        }*/
        SubsidyAppeal subsidyAppeal = baseMapper.getDetail(busId);
        if(null!=subsidyAppeal) {
            return baseMapper.getDetail(busId);
        }
        throw new ServiceException(SubsidyExceptionEnum.SUBSIDY_EXCEPTION_NUll);
    }

    @Override
    public Page<SubsidyAppeal> page(SubsidyAppealParam subsidyAppealParam) {
        // 异议工单
        LambdaQueryWrapper<SubsidyAppeal> queryWrapper = new LambdaQueryWrapper<>();
        if (ObjectUtil.isNotNull(subsidyAppealParam)) {
            if (ObjectUtil.isNotEmpty(subsidyAppealParam.getCustId())) {
                // 客户事件补贴
                CustSubsidyDailyParam custSubsidyDailyParam = new CustSubsidyDailyParam();
                custSubsidyDailyParam.setCustId(subsidyAppealParam.getCustId());
                List<CustSubsidy> custSubsidyList = custSubsidyService.list(custSubsidyDailyParam);
                List<Long> custSubsidyIdList = custSubsidyList.stream().map(CustSubsidy::getSubsidyId).collect(Collectors.toList());
                queryWrapper.in(SubsidyAppeal::getEvaluationId,custSubsidyIdList);
            }
            if (ObjectUtil.isNotEmpty(subsidyAppealParam.getConsId()) || ObjectUtil.isNotEmpty(subsidyAppealParam.getConsIdList())) {
                // 用户事件补贴
                ConsSubsidyDailyParam consSubsidyDailyParam = new ConsSubsidyDailyParam();
                consSubsidyDailyParam.setConsId(subsidyAppealParam.getConsId());
                consSubsidyDailyParam.setConsIdList(subsidyAppealParam.getConsIdList());
                List<ConsSubsidy> ConsSubsidyList = consSubsidyService.list(consSubsidyDailyParam);
                List<Long> consSubsidyIdList = ConsSubsidyList.stream().map(ConsSubsidy::getSubsidyId).collect(Collectors.toList());
                queryWrapper.in(SubsidyAppeal::getEvaluationId,consSubsidyIdList);
            }
        }
        queryWrapper.orderByDesc(SubsidyAppeal::getCreateTime);
        return this.page(subsidyAppealParam.getPage(),queryWrapper);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ResponseData amendSubsidy(SubsidyAppealAmendParam subsidyAppealParam) {
        StrategyUtils strategyUtils = new StrategyUtils();
        Long eventId = subsidyAppealParam.getEventId();
        String consId = subsidyAppealParam.getConsId();
        Event event = eventService.getById(eventId);
        if(null==event) {
            ResponseData.fail("-1","无事件信息","无事件信息");
        }
        if(null!=subsidyAppealParam) {
            ConsEvaluation consEvaluation = null;
            //效果评估新表
            ConsEvaluationAppeal consEvaluationNew = new ConsEvaluationAppeal();
            LambdaQueryWrapper<ConsEvaluation> lambdaQueryWrapper = new LambdaQueryWrapper<>();
            lambdaQueryWrapper.eq(ConsEvaluation::getConsId,consId);
            lambdaQueryWrapper.eq(ConsEvaluation::getEventId,eventId);
            List<ConsEvaluation> consEvaluations = consEvaluationService.list(lambdaQueryWrapper);
            if(null!=consEvaluations && consEvaluations.size()>0) {
                consEvaluation = consEvaluations.get(0);
                BeanUtils.copyProperties(consEvaluation,consEvaluationNew);
            } else {
                //查询邀约信息
                List<ConsInvitation> consInvitations = consInvitationService.getConsInfoByEvent(eventId);
                if(null!=consInvitations && consInvitations.size()>0) {
                    consEvaluationNew.setReplyCap(consInvitations.get(0).getReplyCap());
                    consEvaluationNew.setJoinUserType(consInvitations.get(0).getJoinUserType());
                } else {
                    ResponseData.fail("-1","无邀约信息","无邀约信息");
                }
            }
            BeanUtils.copyProperties(subsidyAppealParam,consEvaluationNew);
            //是否越界
            BigDecimal maxresult=consEvaluationNew.getMaxLoadBaseline().subtract(consEvaluationNew.getMaxLoadActual());
            //是否合格
            BigDecimal avgresult=consEvaluationNew.getAvgLoadBaseline().subtract(consEvaluationNew.getAvgLoadActual());
            if("2".equals(event.getResponseType())) {
                avgresult = NumberUtil.mul(avgresult, -1);
                maxresult = NumberUtil.mul(maxresult, -1);
                //evaluation.setEffectiveTime(strategyUtils.calEeffectiveTime2(actualList, forecastList, eventInvitation.getReplyCap()) * 15);
            }
            if(maxresult.compareTo(consEvaluationNew.getReplyCap())<1)
            {
                consEvaluationNew.setIsOut(YesOrNotEnum.Y.getCode());
            }
            else {
                consEvaluationNew.setIsOut(YesOrNotEnum.N.getCode());
            }
            BigDecimal replyCapparam=consEvaluationNew.getReplyCap().multiply(new BigDecimal(0.8));
            if(avgresult.compareTo(replyCapparam)<1)
            {
                consEvaluationNew.setIsQualified(YesOrNotEnum.N.getCode());
            }
            else {
                consEvaluationNew.setIsQualified(YesOrNotEnum.Y.getCode());
            }
            //有效时长
            int startP = CurveUtil.covDateTimeToPoint(event.getStartTime());
            int endP = CurveUtil.covDateTimeToPoint(event.getEndTime());
            int hour = (endP-startP)*15;
            consEvaluationNew.setEffectiveTime(hour);
            //有效性
            if(hour >= 60 && "Y".equals(consEvaluationNew.getIsQualified()) && consEvaluationNew.getMaxLoadActual().compareTo(consEvaluationNew.getMaxLoadBaseline())<0) {
                consEvaluationNew.setIsEffective("Y");
            } else {
                consEvaluationNew.setIsEffective("N");
            }
            consEvaluationNew.setActualCap(avgresult);
            if("Y".equals(consEvaluationNew.getIsEffective())) {
                BigDecimal temp = strategyUtils.getConfirmCap(consEvaluationNew.getReplyCap(),consEvaluationNew.getActualCap());
                consEvaluationNew.setConfirmCap(temp);
            } else {
                consEvaluationNew.setConfirmCap(BigDecimal.ZERO);
            }
            //负荷响应量为实际负荷占反馈响应量百分比
            if(null==consEvaluationNew.getReplyCap() || consEvaluationNew.getReplyCap().compareTo(BigDecimal.ZERO)==0) {
                consEvaluationNew.setExecuteRate(BigDecimal.ZERO);
            } else {
                consEvaluationNew.setExecuteRate(NumberUtil.div(consEvaluationNew.getActualCap(),consEvaluationNew.getReplyCap()));
            }
            //判断记录是否已经存在
            String consNo = consEvaluationMapper.getEvaluationAppeal(subsidyAppealParam);
            if(null!=consNo) {
                consEvaluationNew.setUpdateTime(new Date());
                LambdaUpdateWrapper<ConsEvaluationAppeal> lambdaUpdateWrapper = new LambdaUpdateWrapper();
                lambdaUpdateWrapper.eq(ConsEvaluationAppeal::getConsId,consId);
                lambdaUpdateWrapper.eq(ConsEvaluationAppeal::getEventId,eventId);
                lambdaUpdateWrapper.setEntity(consEvaluationNew);
                consEvaluationAppealService.update(lambdaUpdateWrapper);
            } else {
                consEvaluationNew.setCreateTime(new Date());
                consEvaluationAppealService.save(consEvaluationNew);
            }
        }
        return ResponseData.success();
    }

    @Override
    public void sumbitCheck(SubsidyAppealParam subsidyAppealParam) {
        BusConfigParam busConfigParam = new BusConfigParam();
        CurrenUserInfo currentUserInfo = SecurityUtils.getCurrentUserInfoUTF8();
        if(ObjectUtil.isNull(currentUserInfo)) {
            throw new ServiceException(CurrenUserInfoExceptionEnum.CURRENT_USER_INFO_NOT_EXIST);
        }
        // 创建待办任务成功，否则为失败
        // 修改竞价的状态为提交审核
        SubsidyAppeal subsidyAppeal = new SubsidyAppeal();
        BeanUtils.copyProperties(subsidyAppealParam,subsidyAppeal);
        subsidyAppeal.setStatus(BiddingCheckStatusEnums.UNSUBMITTED.getCode());
        this.save(subsidyAppeal);

        String infoId = currentUserInfo.getId();
        if(infoId != null){
            Long custId = Long.valueOf(infoId);
            if(custId != null){
                Cust cust = custService.getById(custId);
                if(cust != null){
                    busConfigParam.setApplyManName(cust.getApplyName());
                }
            }
        }
        busConfigParam.setBusId(String.valueOf(subsidyAppeal.getId()));
        busConfigParam.setApplyOrgId(currentUserInfo.getOrgId()); // 申请人组织机构id
        busConfigParam.setBusType(BusTypeEnum.SUBSIDY_PROCESS.getCode()); // 业务类型
        busConfigParam.setApplyManId(Long.parseLong(currentUserInfo.getId())); // 申请人id
        busConfigParam.setLevel(1);
        busConfigParam.setOperaManId(currentUserInfo.getId());

        Result result = null;
        try{
            System.out.println(busConfigParam);
            result = systemClient.selectInfo(busConfigParam);
        }catch (Exception e){
            log.error(e.toString());
        }finally{
            if(ObjectUtil.isNotNull(result) && result.getCode().equals("000000") && result.getData().getString("handleCode").equals("000")) {
                //保存
                subsidyAppeal.setStatus("1");
                this.updateById(subsidyAppeal);

            }else{
                // 创建失败，抛出异常
                this.removeById(subsidyAppeal);
                //throw new ServiceException(ExamineExceptionEnum.CREATION_FAILED);
            }
        }
        return;
    }


    @Override
    public void examine(ExamineParam examineParam) {
        BusConfigParam busConfigParam = new BusConfigParam();
        BeanUtil.copyProperties(examineParam,busConfigParam);
        // 暂时不行
        // CurrenUserInfo sysLoginUser = LoginContextHolder.me().getSysLoginUser();
        CurrenUserInfo currentUserInfo = SecurityUtils.getCurrentUserInfoUTF8();
        if(ObjectUtil.isNull(currentUserInfo)) {
            throw new ServiceException(CurrenUserInfoExceptionEnum.CURRENT_USER_INFO_NOT_EXIST);
        }
        busConfigParam.setOperaManId(currentUserInfo.getId()); // 操作人id
        busConfigParam.setBusType(BusTypeEnum.SUBSIDY_PROCESS.getCode()); // 业务类型
        Result result = systemClient.selectInfo(busConfigParam);
        System.out.println(busConfigParam);
        if(ObjectUtil.isNotNull(result) && result.getCode().equals("000000")) {
            if(result.getData().getString("handleCode").equals(ApprovalCodeEnum.PROCESS_FAIL.getCode())) {
                // 审核流程失败
                throw new ServiceException(ExamineExceptionEnum.APPROVAL_FAIL);
            }
            // 修改异议工单的状态
            SubsidyAppeal subsidyAppeal = new SubsidyAppeal();
            SubsidyAppealParam subsidyAppealParam = new SubsidyAppealParam();

            SubsidyAppeal detail = this.detail(Long.parseLong(examineParam.getBusId()));
            BeanUtils.copyProperties(detail,subsidyAppeal);

            // 审核结束
            if(result.getData().getString("handleCode").equals(ApprovalCodeEnum.PROCESS_SUCCESS.getCode())) {
                subsidyAppeal.setStatus(ProjectCheckStatusEnums.PASS_THE_AUDIT.getCode());
            }
            // 申请被驳回
            if(result.getData().getString("handleCode").equals(ApprovalCodeEnum.APPROVAL_REJECT.getCode())) {
                subsidyAppeal.setStatus(ProjectCheckStatusEnums.AUDIT_FAILED.getCode());
            }
            this.updateById(subsidyAppeal);
            return ;
        }
        // 接口状态码不为000000，抛出异常
        throw new ServiceException(ExamineExceptionEnum.CREATION_FAILED);
    }

    @Override
   public String getFileName(String fileId)
    {
        if(ObjectUtil.isEmpty(fileId)) {
            return "";
        }
        String fileName=getBaseMapper().getFileName(fileId);
        return  fileName;
    }



}
