package com.xqxy.sys.modular.cust.controller;

import cn.afterturn.easypoi.entity.vo.NormalExcelConstants;
import cn.afterturn.easypoi.excel.ExcelExportUtil;
import cn.afterturn.easypoi.excel.entity.ExportParams;
import cn.afterturn.easypoi.excel.entity.ImportParams;
import cn.afterturn.easypoi.excel.entity.enmus.ExcelType;
import cn.afterturn.easypoi.view.PoiBaseView;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.xqxy.core.client.SystemClientService;
import com.xqxy.core.pojo.response.ResponseData;
import com.xqxy.dr.modular.device.model.DeviceBaseModel;
import com.xqxy.dr.modular.project.result.Region;
import com.xqxy.sys.modular.cust.entity.Cons;
import com.xqxy.sys.modular.cust.param.ConsParam;
import com.xqxy.sys.modular.cust.param.CustParam;
import com.xqxy.sys.modular.cust.result.ConsMonitor;
import com.xqxy.sys.modular.cust.result.StatisticsByTypeResult;
import com.xqxy.sys.modular.cust.service.ConsService;
import io.netty.util.internal.StringUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 系统用户控制器
 *
 * @author xuyuxiang
 * @date 2020/3/19 21:14
 */
@Api(tags = "户号管理")
@RestController
@RequestMapping("/dr/user/cons")
public class ConsController {
    @Resource
    ConsService consService;

    @Resource
    private SystemClientService systemClientService;

    @Resource
    private SystemClientService systemClient;

    //    @BusinessLog(title = "用户档案分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "用户档案分页查询", notes = "用户档案分页查询", produces = "application/json")
    @PostMapping("/page")
    public ResponseData page(@RequestBody ConsParam consParam) {
        return ResponseData.success(consService.page(consParam));
    }

    /**
     * 用户档案 导出
     * @param consParam
     * @return
     */
    @ApiOperation(value = "电力用户档案导出", notes = "电力用户档案导出", produces = "application/json")
    @PostMapping("/exportCons")
    public ResponseData exportCons(@RequestBody ConsParam consParam, HttpServletResponse response, HttpServletRequest request) {
        List<Cons> list = consService.list(consParam);
        List<Region> regions = systemClientService.queryAll();
        Map<String, String> collect = regions.stream().collect(Collectors.toMap(Region::getId, Region::getName));

        for (Cons cons : list) {
            String provinceName= collect.get(cons.getProvinceCode());
            String cityName= collect.get(cons.getCityCode());
            String countyName= collect.get(cons.getCountyCode());
            cons.setProvinceCode(provinceName);
            cons.setCityCode(cityName);
            cons.setCountyCode(countyName);
        }
        ExportParams params = new ExportParams("电力用户档案导出", "电力用户档案导出", ExcelType.XSSF);
        HashMap<String,Object> map = new HashMap<>();
        map.put(NormalExcelConstants.DATA_LIST, list);
        map.put(NormalExcelConstants.CLASS, Cons.class);
        map.put(NormalExcelConstants.PARAMS, params);
        map.put(NormalExcelConstants.FILE_NAME, "电力用户档案导出");

        PoiBaseView.render(map, request, response, NormalExcelConstants.EASYPOI_EXCEL_VIEW);

        return ResponseData.success();
    }
    @ApiOperation(value = "用户档案查询", notes = "用户档案查询", produces = "application/json")
    @PostMapping("/list")
    public ResponseData list(@RequestBody ConsParam consParam) {
        return ResponseData.success(consService.list(consParam));
    }

    //    @BusinessLog(title = "用户档案查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "用户档案查询", notes = "用户档案查询", produces = "application/json")
    @GetMapping("/detail")
    public ResponseData detail(@RequestParam(name = "consId", required = true) String condId) {
        return ResponseData.success(consService.detail(condId));
    }

    //    @BusinessLog(title = "用户档案编辑", opType = LogAnnotionOpTypeEnum.EDIT)
    @ApiOperation(value = "用户档案编辑", notes = "用户档案编辑", produces = "application/json")
    @PostMapping("/edit")
    public ResponseData edit(@RequestBody Cons cons) {
        consService.edit(cons);
        return ResponseData.success();
    }

    //    @BusinessLog(title = "户号管理分页查询", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "户号管理分页查询", notes = "户号管理分页查询", produces = "application/json")
    @PostMapping("/pageConsList")
    public ResponseData<?> pageConsList(@RequestBody ConsParam consParam) {
        return ResponseData.success(consService.pageConsList(consParam));
    }

    @ApiOperation(value = "查看签约的项目", notes = "查看签约的项目", produces = "application/json")
    @PostMapping("/listDeclareDetail")
    public ResponseData<?> listDeclareDetail(@RequestBody ConsParam consParam) {
        return ResponseData.success(consService.listDeclareDetail(consParam));
    }

    @ApiOperation(value = "添加户号", notes = "添加户号", produces = "application/json")
    @PostMapping("/add")
    public ResponseData<?> add(@RequestBody Cons cons) {
        consService.add(cons);
        return ResponseData.success();
    }

    @ApiOperation(value = "删除户号", notes = "删除户号", produces = "application/json")
    @PostMapping("/deleteCons")
    public ResponseData<?> deleteCons(@RequestBody ConsParam consParam) {
        consService.deleteCons(consParam);
        return ResponseData.success();
    }

    @ApiOperation(value = "用户档案删除", notes = "用户档案删除", produces = "application/json")
    @GetMapping("/delete")
    public ResponseData delete(@RequestParam(name="id",required = true) String id,@RequestParam(name="integrator",required = true) Integer integrator) {
        ResponseData responseData = consService.delete(id,integrator);
        return responseData;
    }


    //    @BusinessLog(title = "修改用户信息", opType = LogAnnotionOpTypeEnum.UPDATE)
    @ApiOperation(value = "修改用户信息", notes = "修改用户信息", produces = "application/json")
    @PostMapping("/updateFirstContact")
    public ResponseData<?> updateFirstContact(@RequestBody Cons cons) {
        consService.updateFirstContact(cons);
        return ResponseData.success();
    }

    //    @BusinessLog(title = "查看用户详情", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "查看用户详情", notes = "查看用户详情", produces = "application/json")
    @PostMapping("/listConsDetail")
    public ResponseData<?> listConsDetail(@RequestBody ConsParam consParam) {
        return ResponseData.success(consService.getById(consParam.getConsId()));
    }

    //    @BusinessLog(title = "查看用户详情", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "根据子集id查询机构上级树", notes = "根据子集id查询机构上级树", produces = "application/json")
    @PostMapping("/listOrgByChildId")
    public ResponseData<?> listOrgByChildId(@RequestBody ConsParam consParam) {
        return ResponseData.success(consService.listOrgByChildId(consParam.getOrgNo()));
    }

    //    @BusinessLog(title = "根据账号查询用户户号", opType = LogAnnotionOpTypeEnum.QUERY)
    @ApiOperation(value = "根据账号查询用户户号", notes = "根据账号查询用户户号", produces = "application/json")
    @PostMapping("/consByCustList")
    public ResponseData consByCustList() {
        return ResponseData.success(consService.consByCustList());
    }
    /**
     * 根据账号获取用户户号
     * @return
     * @author shi
     * @date 2021-11-1 13:53
     */
    @ApiOperation(value = "根据账号查询户号集合", notes = "根据账号查询户号集合", produces = "application/json")
    @PostMapping("/getconsIdBycust")
    public ResponseData getconsIdBycust() {
        return ResponseData.success(consService.getConsIdAndNameByCust());
    }

    @ApiOperation(value = "查询代理用户详情", notes = "查询代理用户详情", produces = "application/json")
    @PostMapping("/proxyUserDetail")
    public ResponseData<?> proxyUserDetail(@RequestBody ConsParam consParam) {
        Page<Cons> page = new Page(1, 1);
        List<Cons> consList = new ArrayList<>();
        consList.add(consService.proxyUserDetail(consParam));
        page.setRecords(consList);
        return ResponseData.success(page);
    }

    @ApiOperation(value = "用户监测分页", notes = "用户监测分页", produces = "application/json")
    @PostMapping("/consMonitor")
    public ResponseData consMonitor(@RequestBody ConsParam consParam) {
        Page<ConsMonitor> consMonitorList= consService.consMonitor(consParam);

        return ResponseData.success(consMonitorList);
    }

    @ApiOperation(value = "按用户类型统计用户的地区分布情况", notes = "按用户类型统计用户的地区分布情况", produces = "application/json")
    @PostMapping("/statisticsByType")
    public ResponseData statisticsByType() {
        List<StatisticsByTypeResult> statisticsByTypeResultList= consService.statisticsByType();
        return ResponseData.success(statisticsByTypeResultList);
    }

    @ApiOperation(value = "导出 按用户类型统计用户的地区分布情况", notes = "导出 按用户类型统计用户的地区分布情况", produces = "application/json")
    @PostMapping("/exportStatisticsByType")
    public void exportStatisticsByType(HttpServletResponse response, HttpServletRequest request) {
        List<StatisticsByTypeResult> statisticsByTypeResultList = consService.statisticsByType();

        List<Region> regions = systemClient.queryAll();
        // 地区名称转换
        if(!CollectionUtils.isEmpty(regions)){
            Map<String, String> map = regions.stream().collect(Collectors.toMap(Region::getId, Region::getName));
            for (StatisticsByTypeResult typeResult : statisticsByTypeResultList) {
                typeResult.setRegionName(map.get(typeResult.getRegionCode()));
            }
        }else {
            for (StatisticsByTypeResult typeResult : statisticsByTypeResultList) {
                typeResult.setRegionName(typeResult.getRegionCode());
            }
        }

        Workbook workBook = null;
        String fileName = null;
        try {
            //设置文件名称
            fileName = URLEncoder.encode("按用户类型统计用户的地区分布情况", "UTF-8");
            //设置文件类型
            response.setContentType("application/vnd.ms-excel");
            //设置编码格式
            response.setCharacterEncoding("utf-8");
            response.setHeader("Content-disposition", "attachment;filename=" + fileName + ".xlsx");

        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        List<Map<String, Object>> mapList = new ArrayList<>();
        // 创建参数对象（用来设定excel得sheet得内容等信息）
        ExportParams deptExportParams = new ExportParams();
        // 设置sheet得名称
        deptExportParams.setSheetName("按用户类型统计用户的地区分布情况");
        // 创建sheet1使用得map
        Map<String, Object> deviceMap = new HashMap<>();
        // title的参数为ExportParams类型，目前仅仅在ExportParams中设置了sheetName
        deviceMap.put("title", deptExportParams);
        // 模版导出对应得实体类型
        deviceMap.put("entity", StatisticsByTypeResult.class);
        // sheet中要填充得数据
        deviceMap.put("data", statisticsByTypeResultList);
        mapList.add(deviceMap);

        try {
            // 执行方法
            workBook = ExcelExportUtil.exportExcel(mapList, ExcelType.HSSF);
            workBook.write(response.getOutputStream());
            response.getOutputStream().flush();
            response.getOutputStream().close();
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            if(workBook != null) {
                try {
                    workBook.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    @ApiOperation(value = "按用户类型统计用户的地区分布情况明细", notes = "按用户类型统计用户的地区分布情况明细", produces = "application/json")
    @PostMapping("/statisticsByTypeDetail")
    public ResponseData statisticsByTypeDetail(@RequestBody ConsParam consParam) {
        Page<Cons> consList= consService.statisticsByTypeDetail(consParam);
        return ResponseData.success(consList);
    }
    @ApiOperation(value = "用户档案增加", notes = "用户档案增加", produces = "application/json")
    @PostMapping("/addCons")
    public ResponseData addCons(@RequestBody Cons cons) {
        consService.addCons(cons);
        return ResponseData.success();
    }


    /**
     * 根据custId 获取对应的cons集合
     * @author lqr
     * @return
     */
    @ApiOperation(value = "根据custId 获取对应的cons集合", notes = "根据custId 获取对应的cons集合", produces = "application/json")
    @PostMapping("/getConsListByCust")
    public ResponseData getConsListByCust(@RequestBody Cons cons) {
        List<Cons> list = consService.getConsListByCust(cons);
        return ResponseData.success(list);
    }
    /**
     * 根据custId 获取户号详情分页
     * @author shi
     * @return
     */
    @ApiOperation(value = "根据custId 获取户号详情分页", notes = "根据custId 获取户号详情分页", produces = "application/json")
    @PostMapping("/getConsPageByCustId")
    public ResponseData getConsPageByCustId(@RequestBody CustParam custParam) {
        if(StringUtil.isNullOrEmpty(custParam.getCustId()))
        {
            //不传custId查询所有
            Page<Cons> page = consService.getConsPageAll(custParam);
            return ResponseData.success(page);
        } else {
            Page<Cons> page = consService.getConsPageByCustId(custParam);
            return ResponseData.success(page);
        }

    }

    /**
     * 各地市用户类型统计 --- 签约数据 -- 明细
     * @param consParam
     * @return
     */
    @ApiOperation(value = "各地市用户类型统计 --- 签约数据 -- 明细", notes = "各地市用户类型统计 --- 签约数据 -- 明细", produces = "application/json")
    @PostMapping("/consStatisticsDetail")
    public ResponseData consStatisticsDetail(@RequestBody ConsParam consParam) {
        Page<Cons> consList= consService.consStatisticsDetail(consParam);
        return ResponseData.success(consList);
    }
}
